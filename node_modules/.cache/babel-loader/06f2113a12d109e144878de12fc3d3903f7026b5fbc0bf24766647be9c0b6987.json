{"ast":null,"code":"// import { createContext, React, useState, useEffect } from 'react'\n// // import apiRequests from '../api/apiRequests'\n// // import Popup from 'reactjs-popup';\n// // import axios from 'axios';\n\n// const DataContext = createContext({})\n\n// export const Context = ({children}) => {\n//     const [isLoading, setIsLoading] = useState(true)\n//     const [errors, setErrors] = useState({})\n\n//     useEffect(() => {\n//         setTimeout(() => {\n//             setIsLoading(false)\n//         }, 3000)\n//     }, [])\n\n//     const [errorCard, setErrorCard] = useState(false)\n//     //const [displayForErrorCard, setDisplayForErrorCard] = useState('none')\n\n//     //Apply form\n//     const [ formData, setFormData ] = useState({\n//         row_id:'',\n//         name:'',\n//         email:'',\n//         age:'',\n//         discordID:'',\n//         ytLink:'',\n//         rpExp:'',\n//         charName:'',\n//         charBackStory:'',\n//         isRulesAgreed:false\n//     })\n//     const handleFormChange = (e) => {\n//         const { name, value } = e.target\n//         //console.log(e.target.name)\n//         let error = ''\n//         if(name === 'name' && value.length < 4)\n//             error = 'Invalid Name'\n//         else if(name === 'email' && value.length < 10)\n//             error = 'Invalid Email Address'\n//         else if(name === 'age' && (value < 0 || value > 100 ))\n//             error = 'Invalid Age'\n//         else if(name === 'discordTag' && value.length <= 0)\n//             error = 'Invalid Discord Tag'\n//         else if(name === 'rpExp' && (value < 0 || value > 7))\n//             error = 'Invalid Experience'\n//         else if(name === 'charName' && value.length <  3)\n//             error = 'Invalid Character Name'\n//         else if(name === 'charBackStory')\n//         {\n//             let wordCount = value.split(' ')\n//             if(wordCount.length < 2)\n//                 error = 'Minimum 100 words'\n//         }\n//         setErrors({\n//             ...errors,\n//             [name]: error\n//         })\n//         const hasErrors = Object.keys(errors).some(key => errors[key] !== '');\n//         setErrorCard(hasErrors);\n\n//         setFormData({\n//             ...formData,\n//             [name]: name === 'isRulesAgreed' ? !formData.isRulesAgreed : value\n//         })\n//     }\n\n//     const [hideCharInfo, showCharInfo] = useState(false)\n//     //submit form\n//     const submitForm = async (e) => {\n//         e.preventDefault()\n//         if(formData.name !== '' && formData.age !== '' && formData.discordTag  !== '' && formData.rpExp !== '' && formData.charBackStory !== '')\n//         {\n//             try {\n//                 formData.row_id = 4\n//                 //const baseURL = 'https://v1.nocodeapi.com/kishoreeg/google_sheets/wxqTmMRISINVvPLn/addRows?tabId='\n//                 var requestOptions = {\n//                     method: \"post\",\n//                     headers: {\n//                         \"Content-Type\": \"application/json\"\n//                     },\n//                     redirect: \"follow\",\n//                     body: JSON.stringify(formData)\n//                 }\n//                 const response = await fetch(\"https://v1.nocodeapi.com/kishoreeg/google_sheets/wxqTmMRISINVvPLn/addRows?tabId=sheet1\", requestOptions)\n//                 await console.log(\"Response: \", response)\n//             } catch (ex) {\n//                 console.log(ex.Message)\n//             }\n//         }\n//         else\n//         setErrors({\n//             general: 'Fill All The Fields'\n//         })\n//     }\n//     const setAgreed = () => {\n//         setFormData( ...formData, formData.isRulesAgreed=!formData.isRulesAgreed)\n//     }\n//     return (\n//         <DataContext.Provider value={{\n//             isLoading, setIsLoading, submitForm, setAgreed,\n//             hideCharInfo, showCharInfo,\n//             handleFormChange, formData, errors,\n//             errorCard\n//         }}>\n//             {children}\n//         </DataContext.Provider>\n//     )\n// }\n\n// export default DataContext","map":{"version":3,"names":[],"sources":["C:/Users/Kishore E G/Documents/React/web-app/src/Context/Context.js"],"sourcesContent":["// import { createContext, React, useState, useEffect } from 'react'\r\n// // import apiRequests from '../api/apiRequests'\r\n// // import Popup from 'reactjs-popup';\r\n// // import axios from 'axios';\r\n\r\n// const DataContext = createContext({})\r\n\r\n// export const Context = ({children}) => {\r\n//     const [isLoading, setIsLoading] = useState(true)\r\n//     const [errors, setErrors] = useState({})\r\n    \r\n//     useEffect(() => {\r\n//         setTimeout(() => {\r\n//             setIsLoading(false)\r\n//         }, 3000)\r\n//     }, [])\r\n\r\n//     const [errorCard, setErrorCard] = useState(false)\r\n//     //const [displayForErrorCard, setDisplayForErrorCard] = useState('none')\r\n\r\n    \r\n//     //Apply form\r\n//     const [ formData, setFormData ] = useState({\r\n//         row_id:'',\r\n//         name:'',\r\n//         email:'',\r\n//         age:'',\r\n//         discordID:'',\r\n//         ytLink:'',\r\n//         rpExp:'',\r\n//         charName:'',\r\n//         charBackStory:'',\r\n//         isRulesAgreed:false\r\n//     })\r\n//     const handleFormChange = (e) => {\r\n//         const { name, value } = e.target\r\n//         //console.log(e.target.name)\r\n//         let error = ''\r\n//         if(name === 'name' && value.length < 4)\r\n//             error = 'Invalid Name'\r\n//         else if(name === 'email' && value.length < 10)\r\n//             error = 'Invalid Email Address'\r\n//         else if(name === 'age' && (value < 0 || value > 100 ))\r\n//             error = 'Invalid Age'\r\n//         else if(name === 'discordTag' && value.length <= 0)\r\n//             error = 'Invalid Discord Tag'\r\n//         else if(name === 'rpExp' && (value < 0 || value > 7))\r\n//             error = 'Invalid Experience'\r\n//         else if(name === 'charName' && value.length <  3)\r\n//             error = 'Invalid Character Name'\r\n//         else if(name === 'charBackStory')\r\n//         {\r\n//             let wordCount = value.split(' ')\r\n//             if(wordCount.length < 2)\r\n//                 error = 'Minimum 100 words'\r\n//         }\r\n//         setErrors({\r\n//             ...errors,\r\n//             [name]: error\r\n//         })\r\n//         const hasErrors = Object.keys(errors).some(key => errors[key] !== '');\r\n//         setErrorCard(hasErrors);\r\n        \r\n//         setFormData({\r\n//             ...formData,\r\n//             [name]: name === 'isRulesAgreed' ? !formData.isRulesAgreed : value\r\n//         })\r\n//     }\r\n\r\n//     const [hideCharInfo, showCharInfo] = useState(false)\r\n//     //submit form\r\n//     const submitForm = async (e) => {\r\n//         e.preventDefault()\r\n//         if(formData.name !== '' && formData.age !== '' && formData.discordTag  !== '' && formData.rpExp !== '' && formData.charBackStory !== '')\r\n//         {\r\n//             try {\r\n//                 formData.row_id = 4\r\n//                 //const baseURL = 'https://v1.nocodeapi.com/kishoreeg/google_sheets/wxqTmMRISINVvPLn/addRows?tabId='\r\n//                 var requestOptions = {\r\n//                     method: \"post\",\r\n//                     headers: {\r\n//                         \"Content-Type\": \"application/json\"\r\n//                     },\r\n//                     redirect: \"follow\",\r\n//                     body: JSON.stringify(formData)\r\n//                 }\r\n//                 const response = await fetch(\"https://v1.nocodeapi.com/kishoreeg/google_sheets/wxqTmMRISINVvPLn/addRows?tabId=sheet1\", requestOptions)\r\n//                 await console.log(\"Response: \", response)\r\n//             } catch (ex) {\r\n//                 console.log(ex.Message)\r\n//             }\r\n//         }\r\n//         else\r\n//         setErrors({\r\n//             general: 'Fill All The Fields'\r\n//         })\r\n//     }\r\n//     const setAgreed = () => {\r\n//         setFormData( ...formData, formData.isRulesAgreed=!formData.isRulesAgreed)\r\n//     }\r\n//     return (\r\n//         <DataContext.Provider value={{\r\n//             isLoading, setIsLoading, submitForm, setAgreed,\r\n//             hideCharInfo, showCharInfo,\r\n//             handleFormChange, formData, errors,\r\n//             errorCard\r\n//         }}>\r\n//             {children}\r\n//         </DataContext.Provider>\r\n//     )\r\n// }\r\n\r\n// export default DataContext"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}